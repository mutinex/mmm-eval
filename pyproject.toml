[tool.poetry]
name = "mmm-eval"
version = "0.1.3"
description = "Open-source evaluation of marketing mix model (MMM) performance"
authors = ["Joseph Kang <joseph.kang@mutinex.co>",
           "Phil Clark <phil.clark@mutinex.co>",
           "Sam McCormick <samuel.mccormick@mutinex.co>",
           "Benjamin Dobrin <ben.dobrin@mutinex.co>"]
readme = "README.md"
packages = [{include = "mmm_eval"}]

[tool.poetry.dependencies]
python = "3.11.8"
numpy = ">=1.17"
pandas = "^2.0.0"
google-meridian = "^1.1.0"
pymc-marketing = "^0.14.0"
scipy = ">=1.13.1,<2.0.0"
pytensor = "^2.18.0"
pandera = "^0.24.0"
pydantic = "^2.5"
click = "^8.1.7"
pyarrow = "^20.0.0"

[tool.poetry.scripts]
mmm-eval = "mmm_eval.cli.evaluate:main"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.0"
black = "^24.3.0"
isort = "^5.12.0"
flake8 = "^6.1.0"
jupyter = "^1.0.0"
tox = "^4.11.0"
ruff = "^0.1.0"
pyright = "^1.1.377"
pytest-cov = "^6.2.1"
pytest-xdist = "^3.6.1"
# Documentation dependencies
mkdocs = "^1.5.0"
mkdocs-material = "^9.5.0"
mkdocstrings = {extras = ["python"], version = "^0.24.0"}
git-revision-date-localized-plugin = "^1.2.0"
mkdocs-minify-plugin = "^0.7.0"

[tool.black]
line-length = 120
target-version = ["py39"]
include = '\.pyi?$'

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 120

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
addopts = "-ra -q"
markers = [
    "integration: mark a test as an integration test that requires external dependencies",
]

[tool.pyright]
reportMissingImports = false
reportAttributeAccessIssue = "warning"

[tool.ruff]
# Enable the following linters 
select = [
    "E", # pycodestyle
    "F", # Pyflakes
    "I", # isort
    "B", # flake8-bugbear
    "UP", # pyupgrade
    "D" # pydocstyle
]

ignore = [
    # pydocstyle
    "D100", # Missing docstring in public module
    "D101", # Missing docstring in public class
    "D104", # Missing docstring in public package
    "D203", # one-blank-line-before-class
    "D213", # multi-line-summary-second-line
    "D407", # Missing dashed underline after section ("Args")
]

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["A", "B", "C", "D", "E", "F", "G", "I", "N", "Q", "S", "T", "W", "ANN", "ARG", "BLE", "COM", "DJ", "DTZ", "EM", "ERA", "EXE", "FBT", "ICN", "INP", "ISC", "NPY", "PD", "PGH", "PIE", "PL", "PT", "PTH", "PYI", "RET", "RSE", "RUF", "SIM", "SLF", "TCH", "TID", "TRY", "UP", "YTT"]
unfixable = []

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

# Same as Black.
line-length = 120

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Assume Python 3.11.
target-version = "py311"

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"] # imported but unused

[tool.ruff.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.ruff.isort]
case-sensitive = true
